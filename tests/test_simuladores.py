"""
Script de Teste dos Simuladores de Sensores
Sistema de Controle de Acesso - CEU Tres Pontes

Este script demonstra o funcionamento de todos os simuladores de sensores.
"""

import sys
import os
import time
import json
from datetime import datetime

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sensores import LoRaSensor, ZigBeeSensor, SigfoxSensor, RFIDSensor


def print_header(title: str):
    """Imprime um cabe√ßalho formatado."""
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80)


def print_sensor_info(sensor):
    """Imprime informa√ß√µes detalhadas do sensor."""
    print(f"\n{sensor}")
    print("-" * 80)


def test_lora_sensor():
    """Testa o simulador LoRa."""
    print_header("TESTE: SENSOR LORA")
    
    # Cria sensor LoRa
    lora = LoRaSensor(location="Entrada Principal", spreading_factor=7)
    print_sensor_info(lora)
    
    # Simula algumas detec√ß√µes
    print("\nSimulando 5 detec√ß√µes:")
    for i in range(5):
        reading = lora.simulate_detection()
        if reading['activity'] == 1:
            print(f"  ‚úì Detec√ß√£o #{i+1}: Pessoa detectada!")
            print(f"    RSSI: {reading['rssi_dbm']} dBm | Battery: {reading['battery_level']}%")
        else:
            print(f"  - Leitura #{i+1}: Nenhuma atividade")
        time.sleep(0.5)
    
    # Testa mudan√ßa de SF
    print(f"\nAlcance atual (SF{lora.spreading_factor}): {lora.get_range_estimate()}")
    lora.set_spreading_factor(12)
    print(f"Alcance ap√≥s ajuste (SF{lora.spreading_factor}): {lora.get_range_estimate()}")
    
    # Mostra status
    print("\nStatus do Sensor:")
    print(json.dumps(lora.get_status(), indent=2))
    
    return lora


def test_zigbee_sensor():
    """Testa o simulador ZigBee."""
    print_header("TESTE: SENSOR ZIGBEE")
    
    # Cria sensor ZigBee
    zigbee = ZigBeeSensor(location="Sa√≠da Lateral", node_type="Router")
    print_sensor_info(zigbee)
    
    # Simula algumas detec√ß√µes
    print("\nSimulando 5 detec√ß√µes:")
    for i in range(5):
        reading = zigbee.simulate_detection()
        if reading['activity'] == 1:
            print(f"  ‚úì Detec√ß√£o #{i+1}: Pessoa detectada!")
            print(f"    LQI: {reading['link_quality_lqi']} | Neighbors: {reading['neighbor_count']}")
        else:
            print(f"  - Leitura #{i+1}: Nenhuma atividade")
        time.sleep(0.5)
    
    # Mostra informa√ß√µes da rede mesh
    print("\nInforma√ß√µes da Rede Mesh:")
    mesh_info = zigbee.get_mesh_info()
    print(json.dumps(mesh_info, indent=2))
    
    # Descobre vizinhos
    print("\nVizinhos Descobertos:")
    neighbors = zigbee.discover_neighbors()
    for idx, neighbor in enumerate(neighbors[:3], 1):  # Mostra apenas 3
        print(f"  Vizinho {idx}: {neighbor['address']} - LQI: {neighbor['lqi']}")
    
    return zigbee


def test_sigfox_sensor():
    """Testa o simulador Sigfox."""
    print_header("TESTE: SENSOR SIGFOX")
    
    # Cria sensor Sigfox
    sigfox = SigfoxSensor(location="Port√£o de Emerg√™ncia")
    print_sensor_info(sigfox)
    
    # Simula algumas detec√ß√µes
    print("\nSimulando 5 detec√ß√µes:")
    for i in range(5):
        if sigfox.can_send_message():
            reading = sigfox.simulate_detection()
            if reading['activity'] == 1:
                print(f"  ‚úì Detec√ß√£o #{i+1}: Pessoa detectada!")
                print(f"    Mensagens: {reading['messages_sent_today']}/{reading['message_limit']}")
                print(f"    Battery Life: {reading['battery_life_estimate_days']} dias")
            else:
                print(f"  - Leitura #{i+1}: Nenhuma atividade")
        else:
            print(f"  ‚úó Limite de mensagens atingido!")
        time.sleep(0.5)
    
    # Mostra informa√ß√µes de cobertura
    print("\nInforma√ß√µes de Cobertura:")
    coverage = sigfox.get_coverage_info()
    print(json.dumps(coverage, indent=2))
    
    return sigfox


def test_rfid_sensor():
    """Testa o simulador RFID."""
    print_header("TESTE: SENSOR RFID")
    
    # Cria sensor RFID
    rfid = RFIDSensor(location="Catraca Principal", frequency_type="HF", tag_type="Passive")
    print_sensor_info(rfid)
    
    # Simula leitura de tags
    print("\nSimulando leitura de 5 tags:")
    for i in range(5):
        tag_data = rfid.read_tag()
        if tag_data['success']:
            print(f"  ‚úì Tag #{i+1} lida com sucesso!")
            print(f"    ID: {tag_data['tag_id'][:16]}... | RSSI: {tag_data['rssi']} dBm")
        else:
            print(f"  ‚úó Falha ao ler tag #{i+1}")
        time.sleep(0.5)
    
    # Mostra informa√ß√µes do leitor
    print("\nInforma√ß√µes do Leitor:")
    reader_info = rfid.get_reader_info()
    print(json.dumps(reader_info, indent=2))
    
    # Mostra tags √∫nicas detectadas
    print(f"\nTotal de tags √∫nicas detectadas: {rfid.get_unique_tags_count()}")
    
    return rfid


def test_continuous_monitoring(sensors: dict, duration: int = 10):
    """Simula monitoramento cont√≠nuo de todos os sensores."""
    print_header(f"MONITORAMENTO CONT√çNUO - {duration} segundos")
    
    print("\nMonitorando todos os sensores simultaneamente...")
    print("(Pressione Ctrl+C para interromper)\n")
    
    start_time = time.time()
    try:
        while (time.time() - start_time) < duration:
            print(f"\n[{datetime.now().strftime('%H:%M:%S')}] Leitura dos sensores:")
            
            for name, sensor in sensors.items():
                reading = sensor.simulate_detection()
                if reading['activity'] == 1:
                    print(f"  üö∂ {name}: PESSOA DETECTADA em {sensor.location}")
                else:
                    print(f"  ‚ö™ {name}: Nenhuma atividade em {sensor.location}")
            
            time.sleep(2)
    
    except KeyboardInterrupt:
        print("\n\nMonitoramento interrompido pelo usu√°rio.")
    
    # Mostra resumo
    print_header("RESUMO DO MONITORAMENTO")
    total_detections = 0
    for name, sensor in sensors.items():
        detections = sensor.total_detections
        total_detections += detections
        print(f"  {name} ({sensor.location}): {detections} detec√ß√µes")
    
    print(f"\n  TOTAL DE PESSOAS DETECTADAS: {total_detections}")


def generate_report(sensors: dict):
    """Gera um relat√≥rio JSON com os dados de todos os sensores."""
    print_header("GERANDO RELAT√ìRIO")
    
    report = {
        'parque': 'CEU Tres Pontes',
        'timestamp': datetime.now().isoformat(),
        'sensores': {}
    }
    
    for name, sensor in sensors.items():
        report['sensores'][name] = {
            'status': sensor.get_status(),
            'history': sensor.get_history(limit=5)
        }
    
    # Salva relat√≥rio em arquivo
    report_file = os.path.join(os.path.dirname(__file__), 'relatorio_sensores.json')
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úì Relat√≥rio salvo em: {report_file}")
    return report_file


def main():
    """Fun√ß√£o principal de teste."""
    print_header("SISTEMA DE CONTROLE DE ACESSO - CEU TRES PONTES")
    print("\nFASE 1: TESTE DOS SIMULADORES DE SENSORES")
    print("\nProtocolos implementados:")
    print("  ‚Ä¢ LoRa (Long Range)")
    print("  ‚Ä¢ ZigBee (Mesh Network)")
    print("  ‚Ä¢ Sigfox (LPWAN)")
    print("  ‚Ä¢ RFID (Radio Frequency Identification)")
    
    input("\nPressione ENTER para iniciar os testes...")
    
    # Testa cada sensor individualmente
    lora = test_lora_sensor()
    input("\nPressione ENTER para continuar...")
    
    zigbee = test_zigbee_sensor()
    input("\nPressione ENTER para continuar...")
    
    sigfox = test_sigfox_sensor()
    input("\nPressione ENTER para continuar...")
    
    rfid = test_rfid_sensor()
    input("\nPressione ENTER para continuar...")
    
    # Testa monitoramento cont√≠nuo
    sensors = {
        'LoRa': lora,
        'ZigBee': zigbee,
        'Sigfox': sigfox,
        'RFID': rfid
    }
    
    test_continuous_monitoring(sensors, duration=10)
    
    # Gera relat√≥rio final
    generate_report(sensors)
    
    print_header("TESTES CONCLU√çDOS COM SUCESSO!")
    print("\n‚úì Todos os simuladores est√£o funcionando corretamente.")
    print("‚úì Fase 1 do projeto conclu√≠da.\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nTeste interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚úó Erro durante os testes: {e}")
        import traceback
        traceback.print_exc()
